fastlane_version "2.115.0"

fastlane_require 'circleci_artifact'

default_platform :ios

# Set by build environment
# FL_HOCKEY_API_TOKEN
# RZ_KEYCHAIN_PASSWORD
# CIRCLE_API_TOKEN
# SLACK_URL - set the hook URL in the CircleCI environment

# defined in config
# JAZZY_OUTPUT
# JAZZY_ARTIFACTS

BANK_APP = 'BankApp'
SOCIAL_APP = 'SocialApp'
PHOTO_APP = 'PhotoApp'

PRODUCT_NAMES = [SOCIAL_APP, BANK_APP, PHOTO_APP]

# hockey app id hashes
DEVELOP_IDS = {
  BANK_APP => '0aa24abecfcb48d7ab03ea1cf26074cb',
  SOCIAL_APP => '8ced2056b5884381ac30218cdeab765c',
  PHOTO_APP => '295b01ec09064334b893280047da21ae',
}

SPRINT_IDS = {
  BANK_APP => 'e771ef86bdcd40f698cb7610682ea589',
  SOCIAL_APP => '3c7003a1984f4e448630beac446cfde3',
  PHOTO_APP => '9ef33650e15f4376804a9194b09efc9c',
}

# env

ENV['RZ_ARTIFACTS'] = './build'
ENV['RZ_TEST_REPORTS'] ||= ENV['CIRCLE_TEST_REPORTS'] || './build'
ENV['FASTLANE_XCODE_LIST_TIMEOUT'] = '120'
ENV['CI_BUILD'] = 'yes'
ENV['FL_HOCKEY_NOTIFY'] = '0'

DERIVED_DATA_PATH = "#{ENV['RZ_TEST_REPORTS']}/derived_data"
TEST_SCHEME = "CarriersSharedAPI-Unit-Tests"

# lanes

platform :ios do
  before_all do
    if ENV['RZ_ARTIFACTS'] && ENV['RZ_ARTIFACTS'].length > 0
      sh 'rm -rf $RZ_ARTIFACTS && mkdir $RZ_ARTIFACTS'
    end
    install_provisioning_profiles(override_provisioning_profiles: true)
  end

  desc "Runs tests"
  lane :test do
    unlock_keychain(path: './Signing/Raizlabs-DemoApps.keychain', password: ENV['RZ_KEYCHAIN_PASSWORD'] )
    scan(
      workspace: './Example/BankApp/BankApp.xcworkspace',
      output_types: 'junit,html',
      scheme: TEST_SCHEME,
      output_directory: "#{ENV['RZ_TEST_REPORTS']}/scan",
      buildlog_path: "#{ENV['RZ_ARTIFACTS']}",
      code_coverage: true,
      derived_data_path: DERIVED_DATA_PATH
    )

    # TODO: - Add some sort of unit tests to one of the example targets
    # we want to test integration but keep this quick and not do redundant work

    if !ENV['CIRCLE_TEST_REPORTS'].nil?
      # CircleCI requires the "xml" extension for test reporting
      puts "Fixing JUnit report name"
      sh "cp #{ENV['RZ_TEST_REPORTS']}/scan/report.junit #{ENV['RZ_TEST_REPORTS']}/scan/report.xml"
    end
  end

  desc "Generates Docs"
  lane :generate_docs do

    jazzy_output = ENV['JAZZY_OUTPUT']
    jazzy_artifacts = ENV['JAZZY_ARTIFACTS']

    Dir.chdir('../') do
      sh "jazzy --clean --output #{jazzy_output}"
    end
    zip(path: jazzy_output, output_path: jazzy_artifacts)

    # Private token set in Env
    token = ENV['CIRCLE_API_TOKEN']
    # These are already in the Circle environment
    # https://circleci.com/docs/2.0/env-vars/#build-specific-environment-variables
    username = ENV['CIRCLE_PROJECT_USERNAME']
    reponame = ENV['CIRCLE_PROJECT_REPONAME']
    build = ENV['CIRCLE_BUILD_NUM']

    if !(token.nil? or username.nil? or reponame.nil? or build.nil?)
      fetcher = CircleciArtifact::Fetcher.new(token: token, username: username, reponame: reponame, build: build)
      docs = CircleciArtifact::Query.new(url_substring: "docs")
      queries = [docs]
      results = fetcher.fetch_queries(queries)
      docs_url = results.url_for_query(docs)
      if !docs_url.nil?
        slack("[Documentation](#{docs_url}) for iOS Provider SDK â€“ build number: #{build_number}", success: true)
      else
        slack(message: "Unable to find documentation artifacts!", success: false)
      end
    else
      slack(message: "Missing CircleCI artifacts. Most likely the [CIRCLE_API_TOKEN](https://github.com/Raizlabs/circleci_artifact#getting-started) is not set, or not running on CircleCI.", success: false)
    end
  end

  # desc "Runs Code Coverage"
  # lane :coverage do
  #   slather_use_coveralls = "false"
  #   slather_use_circleci = "false"

  #   if !ENV['CIRCLE_BUILD_NUM'].nil?
  #     slather_use_circleci = "true"
  #   end

  #   # Add targets here as you create internal frameworks
  #   xcov_targets = "debug-PRODUCTNAME.app, Services.framework"
  #   xcov_scheme = TEST_SCHEME
  #   xcov_workspace = "PRODUCTNAME.xcworkspace"

  #   xcov(
  #     workspace: xcov_workspace,
  #     scheme: xcov_scheme,
  #     output_directory: "#{ENV['RZ_TEST_REPORTS']}/xcov",
  #     include_targets: xcov_targets,
  #     derived_data_path: DERIVED_DATA_PATH
  #   )

  #   slather_proj = "PRODUCTNAME.xcodeproj"
  #   slather_workspace = xcov_workspace
  #   slather_scheme = TEST_SCHEME
  #   # Add binaries here as you create internal frameworks
  #   slather_binaries = ['debug-PRODUCTNAME', 'Services']
  #   slather_output_directory = "#{ENV['RZ_TEST_REPORTS']}/slather"

  #   # html and cobertura_xml output must be run separately
  #   slather(
  #     proj: slather_proj,
  #     workspace: slather_workspace,
  #     scheme: slather_scheme,
  #     binary_basename: slather_binaries,
  #     output_directory: slather_output_directory,
  #     html: "true",
  #     build_directory: DERIVED_DATA_PATH
  #   )
  #   # Using Cobertura XML allows us to upload to Codecov.io
  #   # Uploading to codecov is handled separately in the .circleci/config.yml
  #   slather(
  #     proj: slather_proj,
  #     workspace: slather_workspace,
  #     scheme: slather_scheme,
  #     binary_basename: slather_binaries,
  #     output_directory: slather_output_directory,
  #     circleci: slather_use_circleci,
  #     coveralls: slather_use_coveralls,
  #     cobertura_xml: "true",
  #     build_directory: DERIVED_DATA_PATH
  #   )
  # end

  # desc "Posts screenshots to Slack"
  # lane :slackshots do
  #   # Getting artifact URLs from CircleCI

  #   # You must set up the CIRCLE_API_TOKEN manually using these instructions
  #   # https://github.com/Raizlabs/ios-template/tree/master/PRODUCTNAME#danger
  #   token = ENV['CIRCLE_API_TOKEN']
  #   # These are already in the Circle environment
  #   # https://circleci.com/docs/2.0/env-vars/#build-specific-environment-variables
  #   username = ENV['CIRCLE_PROJECT_USERNAME']
  #   reponame = ENV['CIRCLE_PROJECT_REPONAME']
  #   build = ENV['CIRCLE_BUILD_NUM']

  #   if !(token.nil? or username.nil? or reponame.nil? or build.nil?)
  #     fetcher = CircleciArtifact::Fetcher.new(token: token, username: username, reponame: reponame, build: build)
  #     screenshots = CircleciArtifact::Query.new(url_substring: 'screenshots/screenshots.html')
  #     queries = [screenshots]
  #     results = fetcher.fetch_queries(queries)
  #     screenshots_url = results.url_for_query(screenshots)
  #     if !screenshots_url.nil?
  #       slack(message: "[Screenshots](#{screenshots_url})", success: true)
  #     else
  #       slack(message: "Screenshots are missing!", success: false)
  #     end
  #   else
  #     slack(message: "Missing CircleCI artifacts. Most likely the [CIRCLE_API_TOKEN](https://github.com/Raizlabs/circleci_artifact#getting-started) is not set, or not running on CircleCI.", success: false)
  #   end
  # end

  desc "Builds and submits a Develop release to Hockey"
  lane :develop do
    PRODUCT_NAMES.each do |productName|
      buildName = "develop-#{productName}"
      buildDemoApp(productName, buildName, 'enterprise', {
        teamID: "XRTVVR644Y",
        signingCertificate: "iPhone Distribution",
        provisioningProfiles: { "com.att.ent.cso.haloc.#{productName.downcase}.develop" => "Raizlabs Generic Enterprise Distribution Profile" }
      })
      hockey(
        ipa: productIPA(productName),
        public_identifier: DEVELOP_IDS[productName]
      )
      # upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_DEVELOPZZ')
      slack(message: "Successfully uploaded #{buildName} build number #{build_number} to develop", success: true)  
    end
  end

  desc "Builds and submits a Sprint release to Hockey"
  lane :sprint do
    PRODUCT_NAMES.each do |productName|
      buildName = "sprint-#{productName}"
      buildDemoApp(productName, buildName, 'enterprise', {
        teamID: "XRTVVR644Y",
        signingCertificate: "iPhone Distribution",
        provisioningProfiles: { "com.att.ent.cso.haloc.#{productName.downcase}.sprint" => "Raizlabs Generic Enterprise Distribution Profile" }
      })
      hockey(
        ipa: productIPA(productName),
        public_identifier: SPRINT_IDS[productName]
      )
      # upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_SPRINTZZ')
      slack(message: "Successfully uploaded #{buildName} build number #{build_number} to sprint", success: true)
    end
  end

  # desc "Builds and submits an App Store release to TestFlight"
  lane :beta do
  #  build("appStore-PRODUCTNAME", 'app-store', {
  #    teamID: "",
  #    signingCertificate: "iPhone Distribution",
  #    provisioningProfiles: { "" => "" }
  #  })    
  #  pilot(
  #   distribute_external: false,
  #     skip_waiting_for_build_processing: true,
  #  )
  #  upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_APPSTOREZZ')
  #  slack(message: "Successfully uploaded build #{build_number} to test flight", success: true)
  end

  # Helpers ----------------------

  def buildDemoApp(name, scheme, export_method, export_options)
    workspacePath = File.expand_path("../Example/#{name}/#{name}.xcworkspace")
    unlock_keychain(path: './Signing/Raizlabs-DemoApps.keychain', password: ENV['RZ_KEYCHAIN_PASSWORD'] )
    gym(
      workspace: workspacePath,
      output_directory: "#{ENV['RZ_ARTIFACTS']}",
      output_name: name,
      export_method: export_method,
      scheme: scheme,
      include_bitcode: true,
      xcargs: "BUILD_NUMBER=#{build_number}",
      buildlog_path: "#{ENV['RZ_ARTIFACTS']}",
      export_options: export_options
    )
  end

  def build_number
    `git rev-list HEAD --count`.chomp()
  end

  def productIPA(productName)
    "#{ENV['RZ_ARTIFACTS']}/#{productName}.ipa"
  end
end
