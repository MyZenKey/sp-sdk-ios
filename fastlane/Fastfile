fastlane_version "2.128.1"

fastlane_require 'circleci_artifact'

default_platform :ios

# Set by build environment
# FL_HOCKEY_API_TOKEN
# CIRCLE_API_TOKEN

# defined in config
# JAZZY_OUTPUT
# JAZZY_ARTIFACTS

# ENV ----------------------

ENV['BUILD_DIR'] = './build'
ENV['TEST_REPORTS'] ||= ENV['CIRCLE_TEST_REPORTS'] || './build'
ENV['FASTLANE_XCODE_LIST_TIMEOUT'] = '120'
ENV['CI_BUILD'] = 'yes'

DERIVED_DATA_PATH = "#{ENV['TEST_REPORTS']}/derived_data"
TEST_PROJCET = 'ZenKeySDK.xcodeproj'
TEST_PROJCET_PATH = "./#{TEST_PROJCET}"
TEST_SCHEME = "ZenKeySDKTests"
REPOSITORY_NAME = "MyZenKey/sp-sdk-ios"
API_TOKEN = ENV['FL_GITHUB_RELEASE_API_TOKEN']

  # LANES ----------------------

platform :ios do

  desc "Runs tests"
  lane :test do
    scan(
      project: TEST_PROJCET_PATH,
      output_types: 'junit,html',
      scheme: TEST_SCHEME,
      output_directory: "#{ENV['TEST_REPORTS']}/scan",
      buildlog_path: "#{ENV['BUILD_DIR']}",
      code_coverage: true,
      derived_data_path: DERIVED_DATA_PATH
    )

    # TODO: - Add some sort of unit tests to one of the example targets
    # we want to test integration but keep this quick and not do redundant work

    if !ENV['CIRCLE_TEST_REPORTS'].nil?
      # CircleCI requires the "xml" extension for test reporting
      puts "Fixing JUnit report name"
      sh "cp #{ENV['TEST_REPORTS']}/scan/report.junit #{ENV['TEST_REPORTS']}/scan/report.xml"
    end
  end

  desc "Bumps ZenKeySDK.podspec and Version.swift"
  lane :bump do
    version = get_version
    UI.important("Current version: #{version}")
    new_version = UI.input("New version?")

    files = ['../ZenKeySDK.podspec', '../ZenKeySDK/Sources/Core/Version.swift']
    files.each do |file|
      text = File.read(file)
      new_contents = text.gsub(/#{version}/, new_version)
      File.open(file, "w") {|file| file.puts new_contents }
    end
  end

  desc "Makes new GitHub release from master"
  lane :release do
    ensure_git_branch(branch: "master")
    ensure_git_status_clean

    version = get_version
    UI.important("Version: #{version}")

    changelog = prompt(
      text: "Changelog: ",
      multi_line_end_keyword: "END"
    )

    github_release = set_github_release(
      name: version,
      tag_name: version,
      description: changelog,
      commitish: "master",
      repository_name: REPOSITORY_NAME,
      api_token: API_TOKEN
    )
  end

  desc "Gets latest version from ZenKeySDK.podspec"
  private_lane :get_version do
    fastlane_require 'cocoapods'
    spec_file = "../ZenKeySDK.podspec"
    spec = Pod::Specification.from_file(spec_file)
    spec.version.to_s
  end
end
